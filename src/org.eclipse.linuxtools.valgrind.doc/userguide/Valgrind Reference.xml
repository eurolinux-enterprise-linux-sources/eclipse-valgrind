<?xml version='1.0' ?><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
	<title>Valgrind Reference</title>
	<chapter id="Overview">
		<title>Overview</title>
		<para>
			<emphasis role="bold">Valgrind</emphasis> is an instrumentation framework for building dynamic analysis tools that can be used to profile applications in detail. Valgrind tools are generally used to automatically detect many memory management and threading problems. The Valgrind suite also includes tools that allow you to build new profiling tools to suit your needs.
		</para>
		<para>The Valgrind plug-in for Eclipse (documented herein) integrates several Valgrind tools into Eclipse. This allows Eclipse users to seamlessly include profiling capabilities into their workflow. At present, the Valgrind plug-in for Eclipse supports three Valgrind tools: 
			<link linkend="Using_Memcheck">Memcheck</link>, 
			<link linkend="Using_Massif">Massif</link>, and 
			<link linkend="Using_Cachegrind">Cachegrind</link>.
		</para>
		<para>For more information about Valgrind, refer to 
			<ulink url="http://www.valgrind.org/">http://www.valgrind.org/</ulink>.
		</para>
	</chapter>
	<chapter id="Installing">
		<title>Installing</title>
		<para>In order for the Valgrind plug-in for Eclipse to work properly, you should have the 
			<emphasis role="italic">valgrind-3.3.0</emphasis> (or later) package installed on your system first. 
		</para>
		<para>Once the 
			<emphasis role="italic">valgrind</emphasis> package is installed, the easiest way to install the Valgrind plug-in for Eclipse is through the 
			<emphasis role="bold">
				<emphasis role="italic">Software Updates and Add-ons</emphasis>
			</emphasis> menu. For information on how to use this menu, refer to 
			<ulink url="http://wiki.eclipse.org/Linux_Tools_Project/PluginInstallHelp#Installing_Updates_From_the_Linux_Tools_Update_Site">this link</ulink>.
		</para>
	</chapter>
	<chapter id="General_Usage">
		<title>General Usage</title>
		<para>You can use the Valgrind plug-in's "one-click launch" shortcut to run a default profile. Doing so is similar to running <code>valgrind ./<i>program_name</i></code> from the command line. To use the one-click launch shortcut, right-click on the 
			<emphasis role="italic">project</emphasis> or 
			<emphasis role="italic">binary</emphasis> name in the 
			<emphasis role="bold">
				<emphasis role="italic">Project Explorer</emphasis>
			</emphasis> window and navigate to <u>Profile As</u> > <u>Profile With Valgrind</u>. If a source file belonging to that program is available on any open editor, you can also right-click inside the editor to navigate to the one-click launch.


			<mediaobject>
				<imageobject>
					<imagedata fileref="Shortcut.png"/>
				</imageobject>
			</mediaobject>
		</para>
		<section id="Configuring_a_Profile_Run">
			<title>Configuring a Profile Run</title>
			<para>To configure a Valgrind profile run, navigate to <u>Profile As</u> > <u>Profile Configurations</u> to access the 
				<emphasis role="bold">
					<emphasis role="italic">Profile Configurations</emphasis>
				</emphasis> menu. 

				<mediaobject>
					<imageobject>
						<imagedata fileref="Screenshot-ProfileConfigurations.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The 
				<emphasis role="bold">
					<emphasis role="italic">Profile Configurations</emphasis>
				</emphasis> menu allows you to configure a profile run with some basic Valgrind profiling options, along with the most useful options for each Valgrind tool. These settings can be configured in the 
				<emphasis role="bold">
					<emphasis role="italic">Valgrind Options</emphasis>
				</emphasis> tab of a specific profile run.


				<mediaobject>
					<imageobject>
						<imagedata fileref="Screenshot-ProfileConfigurations-valgrind-options-tab.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<section id="General_Options">
				<title>General Options</title>
				<para>The 
					<emphasis role="bold">
						<emphasis role="italic">General Options</emphasis>
					</emphasis> tab allows you to configure the following options:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Tool to run</emphasis>
							</emphasis> allows you to choose between 
							<link linkend="Using_Memcheck">Memcheck</link>, 
							<link linkend="Using_Massif">Massif</link>, and 
							<link linkend="Using_Cachegrind">Cachegrind</link> in your profile run. By default, using the one-click shortcut will run the 
							<link linkend="Using_Memcheck">Memcheck</link> tool.  
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Trace children on exec</emphasis>
							</emphasis> configures whether or not to trace into sub-processes initiated via the <code>exec</code> system call. This is identical to using the <code>--trace-children=</code> option. This is disabled by default.
							For more details on the use of the 
							<emphasis role="bold">
								<emphasis role="italic">Trace children on exec</emphasis>
							</emphasis> option for each Valgrind tool, refer to 
							<link linkend="Profiling_Child_Processes">Profiling Child Processes</link>.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Run __libc_freeres on exit</emphasis>
							</emphasis> configures whether or not to run a <code>__libc_freeres</code> routine after the profile run exits. This routine instructs <code>glibc</code> to release all memory it has allocated, and is similar to using the <code>--run-libc-freeres=</code> option. This is enabled by default.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Child silent after fork</emphasis>
							</emphasis> is enabled by default, and in most cases cannot be configured. This option disables any debugging or logging output from child processes created from a <code>fork</code> call.  
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Demangle C++ names</emphasis>
							</emphasis> allows Valgrind to translate encoded C++ names ("mangled" by <code>g++</code> during compilation) back to something similar to their original form. This is enabled by default.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Limit errors reported</emphasis>
							</emphasis> instructs Valgrind to stop reporting errors after a total of 10,000,000 actual errors or 1,000 unique errors have been detected. This is enabled by default. 
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Callers in stack trace</emphasis>
							</emphasis> configures how many levels of function call names Valgrind should use to identify program locations. By default, Valgrind uses 12 levels.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Show errors below main</emphasis>
							</emphasis> configures stack traces for errors should show any functions that appear beneath <code>main()</code>. This is disabled by default. 
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">
								<emphasis role="italic">Max stack frame size</emphasis>
							</emphasis> is the maximum size of a stack frame, and is set to 2000000 by default. 
						</para>
					</listitem>
				</itemizedlist>
				<para>For more information about these options, refer to <code>man valgrind</code>.</para>
			</section>
			<section id="Suppressions">
				<title>Suppressions</title>
				<para>You can also configure your profile run to use a suppressions file (similar to the <code>--suppressions=</code> option. To do this, click the 
					<emphasis role="bold">
						<emphasis role="italic">Suppressions</emphasis>
					</emphasis> tab.


					<mediaobject>
						<imageobject>
							<imagedata fileref="Screenshot-Suppressions.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>The <u>Workspace</u> button allows you to select a resource from the workspace as your suppressions file. To use a suppressions file outisde of the workspace, use the <u>File System</u> button.</para>
			</section>
		</section>
		<section id="Exporting_Valgrind_Data">
			<title>Exporting Valgrind Data</title>
			<para>To export the raw data collected during a Valgrind profile run, use the 
				<emphasis role="bold">
					<emphasis role="italic">Export</emphasis>
				</emphasis> wizard menu. To access the 
				<emphasis role="bold">
					<emphasis role="italic">Export</emphasis>
				</emphasis> wizard menu, navigate to <u>File</u> > <u>Export</u> and select <u>Valgrind Log Files</u> under the category <u>Other</u>. 
			</para>
			<para>

				<mediaobject>
					<imageobject>
						<imagedata fileref="ValgrindExportWizard.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Alternatively, you can also use the <u>Export Valgrind Log Files</u> icon ( 
				<mediaobject>
					<imageobject>
						<imagedata fileref="Exportbuttonvalgrindview.gif"/>
					</imageobject>
				</mediaobject> ) on the Valgrind view toolbar to access the 
				<emphasis role="bold">
					<emphasis role="italic">Export</emphasis>
				</emphasis> wizard menu.
			</para>
		</section>
	</chapter>
	<chapter id="Using_Memcheck">
		<title>Using Memcheck</title>
		<para>Memcheck is the default tool used by Valgrind and the Valgrind plug-in for Eclipse. It allows you to detect memory-related problems such as memory leaks, use of uninitialized memory, and reads from/writes to inappropriate stack areas. For more information about Memcheck, refer to 
			<ulink url="http://www.valgrind.org/docs/manual/mc-manual.html">http://www.valgrind.org/docs/manual/mc-manual.html</ulink>.
		</para>
		<section id="Analyzing_Memcheck_Profile_Results">
			<title>Analyzing Memcheck Profile Results</title>
			<para>Any memory management errors detected by Memcheck are displayed in the Valgrind view, which appears automatically after a profile run. Each displayed error can be expanded in the Valgrind view to display its stack trace.  </para>
			<para>

				<mediaobject>
					<imageobject>
						<imagedata fileref="MemcheckOutput.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>In some cases, Memcheck can determine which section of the source code causes a reported error. Whenever this is the case, double-clicking on the stack trace of the reported error will open the related source file and place the insertion point on the line responsible for the error. </para>
		</section>
		<section id="Configuring_a_Memcheck_Profile_Run">
			<title>Configuring a Memcheck Profile Run</title>
			<para>To configure a Memcheck profile run, navigate to <u>Profile As</u> > <u>Profile Configurations</u> to access the 
				<emphasis role="bold">
					<emphasis role="italic">Profile Configurations</emphasis>
				</emphasis> menu. In the 
				<emphasis role="bold">
					<emphasis role="italic">Valgrind Options</emphasis>
				</emphasis> tab, navigate further to 
				<emphasis role="bold">
					<emphasis role="italic">Memcheck Options</emphasis>
				</emphasis>.

				<mediaobject>
					<imageobject>
						<imagedata fileref="MemcheckOptions.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The 
				<emphasis role="bold">
					<emphasis role="italic">Memcheck Options</emphasis>
				</emphasis> tab allows you to configure the following Memcheck options:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">leak resolution</emphasis>
						</emphasis> sets how tolerant Memcheck should be in considering different stack traces to be the same. The default setting is "low", which means only the first two entries need to match. The "med" setting requires four entries to declare a match. The "high" setting requires all entries to declare match. 
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">freelist size (blocks)</emphasis>
						</emphasis> is identical to the Memcheck command-line option <code>--freelist-vol=</code>, which specifies the maximum total size (in bytes) of memory blocks to be marked "inaccessible" once they have been freed using <code>free</code> (as in C) or <code>delete</code> (as in C++). The default value for 
						<emphasis role="bold">
							<emphasis role="italic">freelist size (blocks)</emphasis>
						</emphasis> is 10000000.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">minimum heap block alignment</emphasis>
						</emphasis> is identical to the Memcheck command-line option <code>--alignment=</code>, which specifies the minimum alignment/size of heap blocks. The default value for this option is 8.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">show reachable blocks</emphasis>
						</emphasis> configures whether or not Memcheck should report blocks it could not find a pointer to during leak detection. This is disabled by default (i.e. do not report blocks with undetermined pointers). 
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">undef value errors</emphasis>
						</emphasis> configures whether or not Memcheck should detect dangerous uses of undefined value errors. This is enabled by default. 
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">allow partial loads</emphasis>
						</emphasis> is identical to the Memcheck command-line option <code>--partial-loads-ok=</code>, which controls how Memcheck handles word-sized, word-aligned loads from addresses from which bytes are addressable and others are not. This is disabled by default (i.e. treat loads from partially invalid and completely invalid addresses as the same). 
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">gcc 2.96 workarounds</emphasis>
						</emphasis> is identical to the Memcheck command-line option <code>--workaround-gcc296-bugs</code>, which controls whether Memcheck should assume that small reads/writes below the stack pointer are due to bugs in 
						<emphasis role="italic">gcc-2.96</emphasis>. This option is disabled by default (i.e. do not assume them to be reslting from 
						<emphasis role="italic">gcc-2.96</emphasis> bugs; report such reads/writes as errors). 
					</para>
				</listitem>
			</itemizedlist>
			<para>Refer to 
				<ulink url="http://www.valgrind.org/docs/manual/mc-manual.html#mc-manual.suppfiles">http://www.valgrind.org/docs/manual/mc-manual.html#mc-manual.suppfiles</ulink> for information about Memcheck suppression files. For more information about each Memcheck option in the Valgrind plug-in for Eclipse, refer to <code>man valgrind</code>.
			</para>
		</section>
	</chapter>
	<chapter id="Using_Massif">
		<title>Using Massif</title>
		<para>Massif is a Valgrind tool that measures how much heap memory an application uses. Heap memory profiling is useful in determining how to reduce the memory usage of an application. For more information about Massif, refer to 
			<ulink url="http://www.valgrind.org/docs/manual/ms-manual.html">http://www.valgrind.org/docs/manual/ms-manual.html</ulink>.
		</para>
		<para>To use Massif, navigate to <u>Profile As</u> > <u>Profile Configurations</u> to access the 
			<emphasis role="bold">
				<emphasis role="italic">Profile Configurations</emphasis>
			</emphasis> menu. Open the 
			<emphasis role="bold">
				<emphasis role="italic">Valgrind Options</emphasis>
			</emphasis> tab and choose Massif from the <u>Tool to run:</u> drop-down list.

			<mediaobject>
				<imageobject>
					<imagedata fileref="SwitchMassif.png"/>
				</imageobject>
			</mediaobject>  
		</para>
		<section id="Analyzing_Massif_Profile_Results">
			<title>Analyzing Massif Profile Results</title>
			<para>Massif distills a large volume of data. The Valgrind plug-in for Eclipse presents three ways to view this data:</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Snapshots Table</emphasis>. Each entry in the Valgrind view contains useful information about each snapshot taken by Massif during the profile run. The peak snapshot is highlighed in bold text.
					</para>
				</listitem>
			</itemizedlist>
			<para>

				<mediaobject>
					<imageobject>
						<imagedata fileref="MassifTable.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Heap Tree</emphasis>. Detailed snapshots are denoted by the <u>Show Heap Tree</u> icon ( 
						<mediaobject>
							<imageobject>
								<imagedata fileref="hierarchy.gif"/>
							</imageobject>
						</mediaobject> ). Double-clicking any of these snapshots will modify the Valgrind view to display all detailed snapshots. Collapsing each detailed snapshot in this view will display a heirarchy of function calls (i.e. heap tree) detailing the heap allocations used during the snapshot.

						<mediaobject>
							<imageobject>
								<imagedata fileref="MassifTree.png"/>
							</imageobject>
						</mediaobject>
						Some functions within the heap tree list a related source file. Double-clicking these functions will open the listed source file and place the insertion point on the specific function responsible for the call.
						You also can also toggle the  <u>Show Heap Tree</u> shortcut on the Valgrind view toolbar to switch between 
						<emphasis role="bold">Snapshots Table</emphasis> and 
						<emphasis role="bold">Heap Tree</emphasis> views.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Heap Chart</emphasis>. The information in the snapshots table is also available in line chart form, displayed in the 
						<emphasis role="bold">Heap Chart</emphasis> window. Clicking any data point in the chart will highlight its corresponding snapshot in the snapshot table. Double-clicking on a data point that corresponds to a detailed snapshot will open an editor to one of its function calls. 

						<mediaobject>
							<imageobject>
								<imagedata fileref="MassifChartSelect.png"/>
							</imageobject>
						</mediaobject>
						If a detailed snapshot contains calls to multiple source files (or multiple functions within a source file), double-clicking its corresponding data point on the heap chart will open the 
						<emphasis role="bold">
							<emphasis role="italic">Open Allocation Function Call</emphasis>
						</emphasis> menu. Double-clicking a function from the 
						<emphasis role="bold">
							<emphasis role="italic">Open Allocation Function Call</emphasis>
						</emphasis> menu will open its corresponding source file and place the insertion point on the specific function responsible for the call.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="Configuring_a_Massif_Profile_Run">
			<title>Configuring a Massif Profile Run</title>
			<para>To configure a Massif profile run, navigate to <u>Profile As</u> > <u>Profile Configurations</u> to access the 
				<emphasis role="bold">
					<emphasis role="italic">Profile Configurations</emphasis>
				</emphasis> menu. In the 
				<emphasis role="bold">
					<emphasis role="italic">Valgrind Options</emphasis>
				</emphasis> tab, navigate further to 
				<emphasis role="bold">
					<emphasis role="italic">Massif Options</emphasis>
				</emphasis>. 

				<mediaobject>
					<imageobject>
						<imagedata fileref="MassifOptions.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The 
				<emphasis role="bold">
					<emphasis role="italic">Massif Options</emphasis>
				</emphasis> tab allows you to configure the following Massif options:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">profile heap</emphasis>
						</emphasis> specifies whether or not heap profiling should be performed. This option is enabled by default. 
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">profile stack</emphasis>
						</emphasis> specifies whether or not stack profiling should be performed. This option is disabled by default, as it significantly slows down Massif.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">heap allocation threshold</emphasis>
						</emphasis> specifies the significance threshold for heap allocations (as a percentage). Allocation tree entries that account for less than this will be aggregated. The default value for this option is 1%.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">time unit</emphasis>
						</emphasis> specifies what time unit should be used for the profile. The possible values for this are instructions (default), milliseconds, or bytes.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">max snapshots</emphasis>
						</emphasis> specifies the maximum number of snapshots that the profile should take. The default value for this is 100.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>The 
						<emphasis role="bold">
							<emphasis role="italic">allocated functions</emphasis>
						</emphasis> field is identical to the Massif command-line option <code>--alloc-fn=</code>, which allows you to specify any function to be treated as a heap allocation function. To add or remove functions to this field, use the <u>New</u> or <u>Remove</u> buttons. You can specify multiple functions in this field. 
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">administrative bytes per block</emphasis>
						</emphasis> is identical to the Massif command-line option <code>--heap-admin=</code>, which specifies the number of administrative bytes (per block) to use if heap profiling is enabled. The default value for this option is 8. 
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">allocation tree depth</emphasis>
						</emphasis> is identical to the Massif command-line option <code>--depth=</code>, which specifies the maximum depth of the allocation trees recorded for detailed snapshots. The default value for this option is 30.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">allocation peak inaccuracy</emphasis>
						</emphasis> is identical to the Massif command-line option <code>--peak-inaccuracy=</code>. Massif records a peak only when the global memory allocation size exceeds the previous peak by the specified percentage value of this option. The default value for this option is 1.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">detailed snapshot frequency</emphasis>
						</emphasis> specifies the frequency at which Massif should take detailed snapshots. The default value for this option is 10; to specify that each snapshot should be detailed, set this option to 1.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">minimum heap block alignment</emphasis>
						</emphasis> specifies the minimum alignment (i.e. size) of heap blocks. 
					</para>
				</listitem>
			</itemizedlist>
			<para>For more information about each Massif option in the Valgrind plug-in for Eclipse, refer to <code>man valgrind</code>.</para>
		</section>
	</chapter>
	<chapter id="Using_Cachegrind">
		<title>Using Cachegrind</title>
		<para>Cachegrind performs cache and branching profiling. A Cachegrind profile run measures the number of cache misses and branch mispredictions performed by an application. Cachegrind collects the following statistics:</para>
		<itemizedlist>
			<listitem>
				<para>L1 instruction cache reads and misses</para>
			</listitem>
			<listitem>
				<para>L1 data cache reads and read misses, writes, and write misses</para>
			</listitem>
			<listitem>
				<para>L2 unified cache reads and read misses, writes and write misses</para>
			</listitem>
			<listitem>
				<para>Conditional branches and mispredicted conditional branches</para>
			</listitem>
			<listitem>
				<para>Indirect branches and mispredicted indirect brances</para>
			</listitem>
		</itemizedlist>
		<para>To use Cachegrind, navigate to <u>Profile As</u> > <u>Profile Configurations</u> to access the 
			<emphasis role="bold">
				<emphasis role="italic">Profile Configurations</emphasis>
			</emphasis> menu. Open the 
			<emphasis role="bold">
				<emphasis role="italic">Valgrind Options</emphasis>
			</emphasis> tab and choose Cachegrind from the 
			<emphasis role="bold">
				<emphasis role="italic">Tool to run:</emphasis>
			</emphasis> drop-down list.

			<mediaobject>
				<imageobject>
					<imagedata fileref="SwitchCachegrind.png"/>
				</imageobject>
			</mediaobject>
		</para>
		<section id="Analyzing_Cachegrind_Profile_Results">
			<title>Analyzing Cachegrind Profile Results</title>
			<para>The results of a Cachegrind profile run are displayed in the Valgrind view. These results show Cachegrind's cache/branch data in different levels of granularity. Double-clicking on any file, function, or line will open the corresponding source file and place the cursor on the appropriate location (if the source can be resolved).</para>
			<para>

				<mediaobject>
					<imageobject>
						<imagedata fileref="CachegrindOutput.png"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="Configuring_a_Cachegrind_Profile_Run">
			<title>Configuring a Cachegrind Profile Run</title>
			<para>To configure a Massif profile run, navigate to <u>Profile As</u> > <u>Profile Configurations</u> to access the 
				<emphasis role="bold">
					<emphasis role="italic">Profile Configurations</emphasis>
				</emphasis> menu. In the 
				<emphasis role="bold">
					<emphasis role="italic">Valgrind Options</emphasis>
				</emphasis> tab, navigate further to 
				<emphasis role="bold">
					<emphasis role="italic">Cachegrind Options</emphasis>
				</emphasis>.

				<mediaobject>
					<imageobject>
						<imagedata fileref="CachegrindOptions.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The 
				<emphasis role="bold">
					<emphasis role="italic">Cachegrind Options</emphasis>
				</emphasis> tab allows you to configure the following Cachegrind options:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">Profile Cache Accesses/Misses</emphasis>
						</emphasis> is identical to the Cachegrind command-line option <code>--cache-sim=</code>, which specifies whether or not to collect cache accesses and miss counts. This option is enabled by default.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">
							<emphasis role="italic">Profile Branch Instructions/Mispredictions</emphasis>
						</emphasis> is identical to the Cachegrind command-line option <code>--branch-sim=</code>, wich specifies whether or not to collect branch instruction and misprediction counts. This option is disabled by default.
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist>
				<listitem>
					<para>The options inside the <u>Manually Set Cache Specifications</u> box allow you to configure the size, associativity, and line size of the following caches:</para>
					<itemizedlist>
						<listitem>
							<para>
								<emphasis role="bold">l1</emphasis> (level 1 instruction) cache
							</para>
						</listitem>
						<listitem>
							<para>
								<emphasis role="bold">D1</emphasis> (level 1 data) cache
							</para>
						</listitem>
						<listitem>
							<para>
								<emphasis role="bold">L2</emphasis> (level 2) cache
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
			<para>For more information about each Cachegrind option in the Valgrind plug-in for Eclipse, refer to <code>man valgrind</code>.</para>
		</section>
	</chapter>
	<chapter id="Special_Cases">
		<title>Special Cases</title>
		<section id="Encountering_Errors">
			<title>Encountering Errors</title>
			<para>If the profiled application contains any errors or if any Valgrind options you selected result in an error, these errors will be reported in the 
				<emphasis role="italic">Core Messages</emphasis> pane of the Valgrind View. The Memcheck tool outputs all of its profile results on this pane. 

				<mediaobject>
					<imageobject>
						<imagedata fileref="ValgrindSegfault.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>For other tools, it is possible to switch between the Core Messages pane and the tool's output in the Valgrind view menu. 

				<mediaobject>
					<imageobject>
						<imagedata fileref="SwitchCoreTool.png"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="Profiling_Child_Processes">
			<title>Profiling Child Processes</title>
			<para>To profile child processes during a profile run, enable the 
				<emphasis role="bold">
					<emphasis role="italic">Trace children on exec</emphasis>
				</emphasis> option in the 
				<emphasis role="bold">
					<emphasis role="italic">General Options</emphasis>
				</emphasis> tab (of the 
				<emphasis role="bold">
					<emphasis role="italic">Valgrind Options</emphasis>
				</emphasis> tab). Memcheck's results will list the process ID (PID) for each reported error in the Valgrind view.
			</para>
			<para>Massif, on the other hand, will present each process separately and allow you to switch between processes with the <u>Select Process ID</u> dropdown icon ( 
				<mediaobject>
					<imageobject>
						<imagedata fileref="Thread.gif"/>
					</imageobject>
				</mediaobject> ) in the Valgrind view toolbar.
			</para>
			<para>Cachegrind will report each PID separately as a top-level element in its output tree.</para>
		</section>
	</chapter>
	<chapter id="Updating_This_Document">
		<title>Updating This Document</title>
		<para>This document is maintained in a collaborative wiki.  If you wish to update or modify this document please visit 

			<ulink url="http://wiki.eclipse.org/Linux_Tools_Project/Valgrind/User_Guide">http://wiki.eclipse.org/Linux_Tools_Project/Valgrind/User_Guide</ulink>
		</para>
	</chapter>
</book>